<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.green.usedmarket.dao.ProductDao">

<!-- 상품등록에서 상품정보를 등록하는 쿼리문 -->
	<insert id="insertProduct" parameterType="kr.green.usedmarket.vo.ProductVo" useGeneratedKeys="true" keyProperty="product.pd_num">
		insert into 
			product(pd_mb_id, pd_title, pd_category, pd_content, pd_price, pd_deal)
			values(#{product.pd_mb_id}, #{product.pd_title}, #{product.pd_category}, 
					#{product.pd_content}, #{product.pd_price}, #{product.pd_deal})
	</insert>
<!-- 상품등록에서 상품이미지를 등록하는 쿼리문 -->
	<insert id="insertProductImg">
		insert into
			product_image(pdimg_pd_num, pdimg_name)
			values(#{pd_num}, #{fileName})
	</insert>
<!-- 상품이미지들의 이름(경로)을 가져오는 쿼리문 -->
	<select id="selectProductImg" resultType="String">
		select pdimg_name from product_image where pdimg_pd_num = #{pd_num}
	</select>
<!-- 상품수정에서 내용을 수정하는 쿼리문 -->
	<update id="updateProduct" parameterType="kr.green.usedmarket.vo.ProductVo">
		update product 
			set pd_title = #{product.pd_title}, pd_category = #{product.pd_category}, pd_deal = #{product.pd_deal},
				pd_content = #{product.pd_content}, pd_price = #{product.pd_price}
		where pd_num = #{product.pd_num}
	</update>
<!-- 상품수정에서 기존 이미지 삭제하는 쿼리문 -->
	<delete id="deleteImg">
		delete from product_image where pdimg_pd_num = #{pd_num} and pdimg_name = #{deleteImg}
	</delete>
<!-- 상품페이지의 가판대정보에 사용될 상품정보와 상품가격 가져오는 쿼리문 -->
	<select id="selectProductNum" resultType="kr.green.usedmarket.vo.PreviewVo">
		select * from product where pd_num != #{pd_num} and pd_mb_id = #{pd_mb_id}
	</select>
<!-- 상품페이지의 가판대정보에 보여질 상품이미지 1개 가져오는 쿼리문 -->
	<select id="selectPreviewImg" resultType="String">
		select pdimg_name from product_image where pdimg_pd_num = #{pd_num} limit 0,1
	</select>
<!-- 문의글 등록하는 쿼리문 -->
	<insert id="insertProductQuestions" useGeneratedKeys="true" keyProperty="board.bo_num">
		insert into
			board(bo_mb_id, bo_pd_num, bo_st_name, bo_type, bo_title, bo_content)
			values(#{board.bo_mb_id}, #{board.bo_pd_num}, #{board.bo_st_name}, #{board.bo_type}, #{board.bo_title}, #{board.bo_content})
	</insert>
<!-- 상품번호와 일치하는 상품문의 게시글들을 가져오는 쿼리문 -->
	<select id="selectgetProductQuestionsList" resultType="kr.green.usedmarket.vo.ProductQuestionsVo">
		select * from board where bo_pd_num = #{pd_num} and bo_type = '4' and bo_isDel = 'N'		
	</select>
<!-- 상품문의 작성자와 일치하는 가판대이미지 가져오는 쿼리문 -->
	<select id="selectProductQuestionsImg" resultType="String">
		select st_img from stand where st_mb_id = #{bo_mb_id}
	</select>
<!-- 상품번호와 회원아이디가 일치하는 찜한정보를 가져오는 쿼리문 -->
	<select id="selectInterestPd" resultType="kr.green.usedmarket.vo.InterestPdVo">
		select * from interest_product where itpd_mb_id = #{mb_id} and itpd_pd_num = #{pd_num}
	</select>
<!-- 찜정보를 등록하는 쿼리문 -->
	<insert id="insertInterestPd">
		insert into
			interest_product(itpd_pd_num, itpd_mb_id, itpd_selected)
			values(#{pd_num}, #{mb_id}, 1)
	</insert>
<!-- 찜정보를 변경하는 쿼리문 -->
	<update id="updateInterestPd" parameterType="kr.green.usedmarket.vo.InterestPdVo">
		update interest_product set itpd_selected = #{interestPd.itpd_selected} where itpd_num = #{interestPd.itpd_num}
	</update>
<!-- 게시물의 번호와 일치하는 게시물을 가져오는 쿼리문 -->
	<select id="selectProductQuestions" resultType="kr.green.usedmarket.vo.BoardVo">
		select * from board where bo_num = ${bo_num}
	</select>
<!-- 게실물의 번호와 일치하는 게시물 변경하는 쿼리문 -->
	<update id="updatePdQuestions" parameterType="kr.green.usedmarket.vo.BoardVo">
		update board
			set bo_title = #{originalBoard.bo_title}, bo_content = #{originalBoard.bo_content}, bo_isDel = #{originalBoard.bo_isDel}
			where bo_num = #{originalBoard.bo_num}, mb_phone = #{originalBoard.mb_phone}, mb_email = #{originalBoard.mb_email}
	</update>
<!-- 게시글 번호와 일치하는 답글을 가져오는 쿼리문 -->
	<select id="selectComment" resultType="kr.green.usedmarket.vo.CommentVo">
		select * from comment where cmt_bo_num = #{cmt_bo_num} and cmt_isDel = 'N'
	</select>
<!-- 답글을 등록하는 쿼리문 -->
	<insert id="insertComment" parameterType="kr.green.usedmarket.vo.CommentVo">
	 	insert into
	 		comment(cmt_bo_num, cmt_pd_num, cmt_mb_id, cmt_content)
	 		values(#{comment.cmt_bo_num}, #{comment.cmt_pd_num}, #{comment.cmt_mb_id}, #{comment.cmt_content})
	</insert>
<!-- 상품문의글에 등록된 답글을 가져오는 쿼리문 -->
	<select id="selectCommentList" resultType="kr.green.usedmarket.vo.CommentVo">
		select * from comment where cmt_pd_num = #{pd_num} and cmt_isDel = 'N'
	</select>
<!-- 상품문의글에 등록된 답글의 내용을 수정하는 쿼리문 -->
	<update id="updateComment" parameterType="kr.green.usedmarket.vo.CommentVo">
		update comment
			set cmt_content = #{comment.cmt_content}, cmt_isDel = #{comment.cmt_isDel}
			where cmt_bo_num = #{comment.cmt_bo_num} and cmt_isDel = 'N'	
	</update>
<!-- 상품문의글 번호와 일치하는 상품문의글 가져오는 쿼리문 -->
	<select id="selectgetProductQuestions" resultType="kr.green.usedmarket.vo.ProductQuestionsVo">
		select * from board where bo_num = #{bo_num}
	</select>
<!-- 조회수를 증가시키는 쿼리문 -->
	<update id="updateViews">
		update product set pd_views = pd_views + 1 where pd_num = #{pd_num}
	</update>
<!-- 관심수의 갯수를 구하는 쿼리문 -->
	<select id="selectInterestCnt" resultType="int">
		select count(*) from interest_product where itpd_pd_num = #{pd_num} and itpd_selected = 1
	</select>
<!-- 관심수를 업데이트하는 쿼리문 -->
	<update id="updateIntersetCnt">
		update product set pd_interestCnt = #{interestCnt} where pd_num = #{pd_num}
	</update>
<!-- 아이디와 일치하는 마지막에 등록된 댓글 정보를 가져오는 쿼리문-->
	<select id="selectNewComment" resultType="kr.green.usedmarket.vo.CommentVo">
		select * from comment where cmt_isDel = 'N' and cmt_mb_id = #{mb_id} order by cmt_bo_num DESC limit 0, 1
	</select>
<!-- 메인 화면에 나타낼 최신상품을 가져오는 쿼리문(최대 32개) -->
	<select id="selectNewProductList" resultType="kr.green.usedmarket.vo.DibsVo">
		select * from product where pd_isDel = 'N' order by pd_registerDate DESC limit 0, 32
	</select>
<!-- 메인 화면에 나타낼 관심상품을 가져오는 쿼리문 -->
	<select id="selectInterestProduct" resultType="kr.green.usedmarket.vo.DibsVo">
		select * from product where pd_isDel = 'N' and pd_interestCnt > 0 order by pd_interestCnt DESC limit 0, 32
	</select>

</mapper>